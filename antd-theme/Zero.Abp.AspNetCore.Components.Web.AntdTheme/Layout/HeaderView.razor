@namespace Zero.Abp.AspNetCore.Components.Web.AntdTheme
@inherits AntLayoutComponentBase

@if (needFixedHeader)
{
    <Header Style="@FixedHeaderStyle" />
}
<Header Style="@HeaderStyle"
        Class="@HeaderClass">
    @if ((isTop || isSplitMenus) && !IsMobile)
    {
        <TopNavHeader Mode="MenuMode.Horizontal" MenuData="MenuData"
                      @bind-SelectedKeys="SelectedKeys" />
    }
    else
    {
        <GlobalHeader IsMobile="IsMobile"
                      Collapsed="@Collapsed"
                      OnCollapse="HandleCollapse">
            @HeaderContentRender
        </GlobalHeader>
    }
</Header>

@code {

    [Parameter] public ApplicationMenuItemList MenuData { get; set; }
    [Parameter] public string[] SelectedKeys { get; set; } = null;
    [Parameter] public EventCallback<string[]> SelectedKeysChanged { get; set; }

    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
    [Parameter] public EventCallback<bool> OnCollapse { get; set; }
    private async Task HandleCollapse(bool collapsed)
    {
        Collapsed = collapsed;
        if (OnCollapse.HasDelegate) { await OnCollapse.InvokeAsync(collapsed); }
        if (CollapsedChanged.HasDelegate) { await CollapsedChanged.InvokeAsync(collapsed); }
    }


    [Parameter] public int SiderWidth { get; set; } = 208;
    [Parameter] public bool IsMobile { get; set; }
    [Parameter] public bool HasSiderMenu { get; set; }
    [Parameter] public RenderFragment HeaderContentRender { get; set; }

    private bool isTop => Settings.Layout == Layout.Top.Name;
    private bool isMix => Settings.Layout == Layout.Mix.Name;
    private bool isSplitMenus => isMix && Settings.SplitMenus;

    private bool needFixedHeader => Settings.FixedHeader || isMix;
    private int headerHeight => Settings.HeaderHeight;

    private bool needSideWidth => needFixedHeader && HasSiderMenu && !isTop && !IsMobile;
    private string headerWidth => !isMix && needSideWidth
      ? $"calc(100% - {(Collapsed ? 48 : SiderWidth)}px)" : "100%";
    private int? headerRight => needFixedHeader ? 0 : null;

    private string HeaderClass => ClassNames(
         ($"{PrefixCls}-fixed-header", needFixedHeader)
       , ($"{PrefixCls}-fixed-header-action", !Collapsed)
       , ($"{PrefixCls}-top-menu", Settings.Layout == Layout.Top.Name)
       , ($"{PrefixCls}-header-{Settings.HeaderTheme}")
        );

    private string FixedHeaderStyle =>
    $"height:{headerHeight}px;line-height:{headerHeight}px;background:transparent";

    private string HeaderStyle =>
    $"padding:0px;height:{headerHeight}px;line-height:{headerHeight}px;width:{headerWidth};z-index:{(isMix ? 100 : 9)};{(headerRight.HasValue ? $"right:{headerRight}px;" : "")}{Style}";
}