@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime

<SelectLang Languages="_languages"
            Value="_currentLanguage"
            OnChange="(language)=>ChangeLanguageAsync(language)" />

@code {
    private IReadOnlyList<LanguageInfo> _languages;
    private LanguageInfo _currentLanguage;

    protected override async Task OnInitializedAsync()
    {
        var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
            "localStorage.getItem",
            "Abp.SelectedLanguage"
            );

        _languages = await LanguageProvider.GetLanguagesAsync();
        if (!_languages.Any()) { return; }

        _currentLanguage = !selectedLanguageName.IsNullOrWhiteSpace()
        ? _languages.FirstOrDefault(l => l.UiCultureName == selectedLanguageName)
        : _languages.FirstOrDefault(l => l.UiCultureName == CultureInfo.CurrentUICulture.Name)
        ?? _languages.FirstOrDefault();
    }

    private async Task ChangeLanguageAsync(LanguageInfo language)
    {
        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.SelectedLanguage", language.UiCultureName
            );

        await JsRuntime.InvokeVoidAsync("location.reload");
    }
}
