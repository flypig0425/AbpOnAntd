@namespace Zero.Abp.AntBlazor.Layout
@inherits AntLayoutComponentBase

@if (IsMobile)
{
    <Drawer Visible="@(!Collapsed)"
        Placement="left"
        Class="@($"{PrefixCls}-drawer-sider")"
        Width="@SiderWidth"
        Style="@("padding: 0; height: 100vh; "+Style)"
        BodyStyle="height: 100vh; padding: 0; display: flex; flex-direction: row"
        OnClose="async ()=> { await HandleCollapse(true); }">
        <SiderMenu Collapsed="@false"
               Mode="Mode"
               Class="@ClassNames($"{PrefixCls}-sider",Class)"
               Links="Links"
               LogoStyle="LogoStyle"
               MenuData="MenuData"
               SelectedKeys="SelectedKeys"
               SelectedKeysChanged="SelectedKeysChanged"
               MenuExtraRender="MenuExtraRender"
               MenuFooterRender="MenuFooterRender"
               CollapsedButtonRender="CollapsedButtonRender" />
    </Drawer>
}
else
{
    <SiderMenu Style="@Style"
           Collapsed="@Collapsed"
           OnCollapse="HandleCollapse"
           Mode="Mode"
           Class="@ClassNames($"{PrefixCls}-sider",Class)"
           Links="Links"
           LogoStyle="LogoStyle"
           MenuData="MenuData"
           SelectedKeys="SelectedKeys"
           SelectedKeysChanged="SelectedKeysChanged"
           MenuExtraRender="MenuExtraRender"
           MenuFooterRender="MenuFooterRender"
           CollapsedButtonRender="CollapsedButtonRender" />
}

@code {
    #region [@bind-Collapsed,OnCollapse]
    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
    [Parameter] public EventCallback<bool> OnCollapse { get; set; }
    private async Task HandleCollapse(bool collapsed)
    {
        Collapsed = collapsed;
        if (OnCollapse.HasDelegate) { await OnCollapse.InvokeAsync(collapsed); }
        if (CollapsedChanged.HasDelegate) { await CollapsedChanged.InvokeAsync(collapsed); }
    }
    #endregion

    #region [@bind-SelectedKeys]
    [Parameter] public string[] SelectedKeys { get; set; }
    [Parameter] public EventCallback<string[]> SelectedKeysChanged { get; set; }
    #endregion

    #region [Menu]
    [Parameter] public int SiderWidth { get; set; }
    [Parameter] public string LogoStyle { get; set; }
    [Parameter] public MenuMode Mode { get; set; }
    [Parameter] public ApplicationMenuItemList MenuData { get; set; }
    [Parameter] public List<RenderFragment> Links { get; set; }
    [Parameter] public RenderFragment MenuExtraRender { get; set; }
    [Parameter] public RenderFragment MenuFooterRender { get; set; }
    [Parameter] public RenderFragment<bool> CollapsedButtonRender { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (IsMobile) { await HandleCollapse(true); }
    }
}