@namespace Zero.Abp.AntBlazor.Layout
@using System.Linq.Expressions
@using Zero.Abp.AntBlazor.Layout.LayoutConfig
@inherits AntLayoutComponentBase

<AntList Split="false"
         DataSource="SettingItems"
         ItemLayout="ListItemLayout.Horizontal">
    <ListItem>
        @context
    </ListItem>
</AntList>

@code
{
    public RenderFragment SimpleSelectRender(
                                                    Expression<Func<LayoutSettings, string>> propertySelector
                                                    , Func<string> valueFactory, (string label, string value)[] options
                                                    , Func<bool> disabledFactory = null)
    {
        var fieldName = (propertySelector.Body as MemberExpression)?.Member?.Name;
        return@<Template>
            <span style="@StyleValues(("opacity:0.5",disabledFactory))">@L[fieldName]</span>
            <RadioGroup Size="@("small")" TValue="string" Value="@(valueFactory?.Invoke()?? "")" Disabled="@(disabledFactory?.Invoke()?? false)"
                OnChange="async value=>await UpdateSettingAsync(propertySelector,value,valueFactory)"
                ButtonStyle="@RadioButtonStyle.Solid">
            @foreach (var item in options)
                {
                                <Radio RadioButton Disabled="@(disabledFactory?.Invoke()?? false)" Value="@item.value">@item.label</Radio>
                }
                    </RadioGroup>

        </Template>
    ;
    }

    public RenderFragment SwitchRender(
        Expression<Func<LayoutSettings, bool>> propertySelector
        , Func<bool> valueFactory
        , Func<bool> disabledFactory = null)
    {
        var fieldName = (propertySelector.Body as MemberExpression)?.Member?.Name;
        return @<Template>
            <span style="@StyleValues(("opacity:0.5",disabledFactory))">@L[fieldName]</span>
            <Switch Size="small" Checked="@(valueFactory?.Invoke()?? false)" Disabled="@(disabledFactory?.Invoke()?? false)"
            OnChange="async value=>await UpdateSettingAsync(propertySelector,value,valueFactory)" />
    </Template>
    ;
    }


    /// <summary>
    /// LayoutSetting,RegionalSetting,OtherSetting,ThemeSetting
    /// </summary>
    [Parameter] public string ListType { get; set; }


    public RenderFragment[] SettingItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LayoutConfigProvider.SettingsChanged += OnSettingsChanged;
        if (ListType == "LayoutSetting")
        {
            SettingItems = new[] {
                SimpleSelectRender(x => x.ContentWidth,()=>Settings.ContentWidth,new []{ (L["Fixed"].Value,"fixed"), (L["Fluid"],"fluid")}   ),
                SimpleSelectRender(x => x.HeaderTheme,()=>Settings.HeaderTheme,new []{ (L["Light"].Value,"light"), (L["Dark"],"dark")}  ,()=>IsSideLayout ),
                SimpleSelectRender(x => x.SidebarTheme,()=>Settings.SidebarTheme,new []{ (L["Light"].Value,"light"), (L["Dark"],"dark")} ,()=>IsTopLayout),
                SwitchRender( x => x.FixedHeader,() => Settings.FixedHeader ,()=>IsMixLayout),
                SwitchRender(x => x.FixedSidebar,() => Settings.FixedSidebar ,()=>IsTopLayout),
                SwitchRender(x => x.SplitMenus,() => Settings.SplitMenus,()=>!IsMixLayout )
            };
        }
        if (ListType == "RegionalSetting")
        {
            SettingItems = new[] {
                SwitchRender(x=>x.HeaderRender,()=>Settings.HeaderRender),
                SwitchRender(x=>x.FooterRender,()=>Settings.FooterRender),
                SwitchRender(x=>x.MenuRender,()=>Settings.MenuRender ,()=>IsTopLayout),
                SwitchRender(x=>x.MenuHeaderRender,()=>Settings.MenuHeaderRender,()=>IsTopLayout)
            };
        }
        if (ListType == "OtherSetting")
        {
            SettingItems = new[] {
                SwitchRender( x => x.ColorWeak, () => Settings.ColorWeak)
            };
        }
        if (ListType == "ThemeSetting")
        {
            SettingItems = new[]{
                SwitchRender( x => x.CompactTheme, () => Settings.CompactTheme),
                SwitchRender( x => x.DarkTheme, () => Settings.DarkTheme)
            };
        }
    }


    protected override void Dispose(bool disposing)
    {
        if (LayoutConfigProvider != null)
        {
            LayoutConfigProvider.SettingsChanged -= OnSettingsChanged;
        }
        base.Dispose(disposing);
    }
}