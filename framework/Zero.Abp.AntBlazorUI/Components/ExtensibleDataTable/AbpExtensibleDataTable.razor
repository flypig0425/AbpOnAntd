@typeparam TItem
@using Microsoft.Extensions.Localization
@using Volo.Abp.Data
@using Zero.Abp.AntBlazorUI.Components.ObjectExtending
@using Zero.Abp.AspNetCore.Components.MessageBoxs
@using Zero.Abp.AspNetCore.Components.Web.Extensibility.EntityActions
@using global::Localization.Resources.AbpUi
@inject IStringLocalizer<AbpUiResource> L
@inject IUiMessageBoxService UiMessageBoxService

@if (Toolbar != null)
{
    <Space Style="margin:8px 0">
        @foreach (var toolbarItem in Toolbar)
        {
            <SpaceItem>
                @RenderTableToolbarComponent(toolbarItem)
            </SpaceItem>
        }
    </Space>
}

<Table Bordered="@true"
       Size="@TableSize.Middle"
       TItem="TItem"
       DataSource="@Data"
       Total="@(TotalItems??0)"
       OnChange="@ReadData"
       HidePagination="@(ShowPager==false)"
       @bind-PageIndex="@CurrentPage"
       @bind-PageSize="@PageSize">
    @*  <Selection Key="@(context.Id.ToString())" /> *@
    @if (Columns != null)
    {
        @foreach (var column in Columns)
        {
            if (column.Actions.Any())
            {
                <ActionColumn Title="@L["Actions"]" Width="@("150px")">
                    <Space>
                        @foreach (var action in column.Actions)
                        {
                            if (action?.Visible(context) ?? true)
                            {
                                <SpaceItem>
                                    <a @onclick="async () => await ActionClickedAsync(context,action)">
                                        @if (!string.IsNullOrEmpty(action.Icon))
                                        {
                                            <IconView Icon="@action.Icon" />
                                        }
                                        @action.Text
                                    </a>
                                </SpaceItem>
                            }
                        }
                    </Space>
                </ActionColumn>
            }
            else
            {
                @if (column.Component != null)
                {
                    <Column TData="object" DataIndex="@typeof(TItem).GetProperties().First().Name" Title="@column.Title">
                        @RenderCustomTableColumnComponent(column.Component, context)
                    </Column>
                }
                else
                {
                    if (!ExtensionPropertiesRegex.IsMatch(column.Data))
                    {
                        @if (column.ValueConverter == null)
                        {
                            @*FormatProvider="@column.DisplayFormatProvider" *@
                            <Column TData="object" DataIndex="@column.Data" Title="@column.Title" Sortable="@column.Sortable"
            Format="@column.DisplayFormat" />
                        }
                        else
                        {
                            <Column TData="object" DataIndex="@typeof(TItem).GetProperties().First().Name" Title="@column.Title"
            Sortable="@column.Sortable">
                                @(GetConvertedFieldValue(context, column))
                            </Column>
                        }
                    }
                    else
                    {
                        <Column TData="object" DataIndex="@nameof(IHasExtraProperties.ExtraProperties)" Title="@column.Title">
                            @{
                                var entity = context as IHasExtraProperties;
                                var propertyName = ExtensionPropertiesRegex.Match(column.Data).Groups[1].Value;
                                var propertyValue = entity.GetProperty(propertyName);
                                if (propertyValue != null && propertyValue.GetType() == typeof(bool))
                                {
                                    if ((bool)propertyValue)
                                    {
                                        <Icon class="text-success" Type="check" />
                                    }
                                    else
                                    {
                                        <Icon class="text-danger" Type="close" />
                                    }
                                }
                                else
                                {
                                    if (column.ValueConverter != null)
                                    {
                                        @(GetConvertedFieldValue(context, column))
                                    }
                                    else
                                    {
                                        if (column.DisplayFormat == null)
                                        {
                                            @(propertyValue)
                                        }
                                        else
                                        {
                                            @(string.Format(column.DisplayFormatProvider, column.DisplayFormat, propertyValue))
                                        }
                                    }
                                }
                            }
                        </Column>
                    }
                }
            }
        }
    }
</Table>

@*@ref="table"
    @bind-SelectedRows="selectedRows"*@


@code {
    protected internal virtual async Task ActionClickedAsync<T>(T context, EntityAction action)
    {
        var confirmationMessage = action.ConfirmationMessage?.Invoke(context);
        if (!confirmationMessage.IsNullOrWhiteSpace())
        {
            if (await UiMessageBoxService.Confirm(confirmationMessage))
            {
                await InvokeAsync(async () => await action.Clicked(context));
            }
        }
        else
        {
            await action.Clicked(context);
        }
    }
}
