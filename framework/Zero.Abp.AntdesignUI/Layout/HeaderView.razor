@namespace Zero.Abp.AntdesignUI.Layout
@inherits AntProComponentBase

@if (_needFixedHeader)
{
    <Header Style="@_fixedHeaderStyle"></Header>
}
<Header Class="@HeaderClass" Style="@_headerStyle">
    @if (_isTop && !IsMobile)
    {
        <TopNavHeader Mode="MenuMode.Horizontal" />
    }
    else
    {
        <GlobalHeader>
            @HeaderContentRender
        </GlobalHeader>
    }
</Header>

@using System.Text;
@code{

    private string _headerStyle;
    private string _fixedHeaderStyle;
    private bool _needFixedHeader;
    private bool _needSettingWidth;
    private bool _isTop;

    [Parameter] public int SiderWidth { get; set; } = 208;
    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public bool IsMobile { get; set; }
    [Parameter] public bool HasSiderMenu { get; set; }
    [Parameter] public RenderFragment HeaderContentRender { get; set; }


    private string HeaderClass => ClassNames(
         ($"{PrefixCls}-fixed-header", _needFixedHeader)
        , ($"{PrefixCls}-top-menu", Layout == Layout.Top)
        );


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetStyle();
    }

    protected void SetStyle()
    {
        _isTop = Layout == Layout.Top;
        _needFixedHeader = FixedHeader || Layout == Layout.Mix;
        _needSettingWidth = _needFixedHeader && HasSiderMenu && !_isTop && !IsMobile;
        var width = Layout == Layout.Mix && _needSettingWidth ? $"calc(100% - {(Collapsed ? "48" : SiderWidth.ToString())}px)" : "100%";
        var zIndex = Layout == Layout.Mix ? 100 : 9;
        var sb = new StringBuilder();
        sb.Append("padding: 0;");
        sb.Append($"height: {HeaderHeight}px;");
        sb.Append($"line-height: {HeaderHeight}px;");
        sb.Append($"width: {width};");
        sb.Append($"z-index: {zIndex};");
        if (_needFixedHeader) { sb.Append("right: 0;"); }
        sb.Append(Style);
        _headerStyle = sb.ToString();
        _fixedHeaderStyle = $"height:{HeaderHeight}px; line-height: {HeaderHeight}px; background: transparent;";
    }


    protected override void OnStateChanged()
    {
        SetStyle();
        base.OnStateChanged();
    }
}