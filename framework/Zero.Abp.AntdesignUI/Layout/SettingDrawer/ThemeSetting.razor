@namespace Zero.Abp.AntdesignUI.Layout
@inherits SettingDrawerBase

<ThemeColor Title="@L["ThemeColor"]"
            Colors="LightColorList"
            Value="@Settings.PrimaryColor"
            OnChange="value=>UpdateSettingAsync<string>(x=>x.PrimaryColor,()=>Settings.PrimaryColor,value)" />

<AntList Split="false"
         DataSource="OtherSettings"
         ItemLayout="ListItemLayout.Horizontal">
    <ListItem>
        <span style="opacity: @(context.Disabled ? "0.5" : "1")">@context.Title</span>
        @context.Action
    </ListItem>
</AntList>
<link type="text/css" rel="stylesheet" id="theme-style" href="@_themeUrl" @ref="_themeRef">
@code
{
    RenderFragment SwitchRender(Expression<Func<LayoutSettings, bool>> propertySelector, Func<bool> valueFactory)
    {
        return @<Template>
        <Switch Size="small" Checked="@valueFactory.Invoke()"
            OnChange="value=>UpdateSettingAsync(propertySelector,valueFactory,value)" />
    </Template> ;
    }

       private ColorItem[] LightColorList { get; set; } = Utils.ThemeColors.Select(x => new ColorItem
        {
            Key = x.Value,
            Color = x.Key,
            Theme = "light"
        }).ToArray();

    public SettingItem[] OtherSettings { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        OtherSettings = new[]
            {
            new SettingItem
            {
                Title =L["CompactTheme"],
                Action =SwitchRender( x => x.CompactTheme, () => Settings.CompactTheme)
            },
            new SettingItem
            {
                Title =L["DarkTheme"],
                Action =SwitchRender( x => x.DarkTheme, () => Settings.DarkTheme)
            }
        };
    }
}