@namespace Zero.Abp.AntdesignUI.Layout
@inherits SettingDrawerBase

<AntList Split="false"
         DataSource="SettingItems"
         ItemLayout="ListItemLayout.Horizontal">
    <ListItem>
        @context.Action
    </ListItem>
</AntList>

@code
{       public RenderFragment SwitchRender(
Expression<Func<LayoutSettings, bool>> propertySelector
, Func<bool> valueFactory
, Func<bool> disabledFactory = null)
    {
        var fieldName = (propertySelector.Body as MemberExpression)?.Member?.Name;
        return@<Template>
        <span style="@StyleValues(("opacity:0.5",disabledFactory))">@L[fieldName]</span>
        <Switch Size="small" Checked="@(valueFactory?.Invoke()?? false)" Disabled="@(disabledFactory?.Invoke()?? false)"
                OnChange="value=>UpdateSettingAsync(propertySelector,valueFactory,value)" />
    </Template>
    ;
    }

    public SettingItem[] SettingItems { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Settings.Changed += OnSettingsChanged;
        SettingItems = new[] {
            new SettingItem
            {
                Action =SwitchRender(x=>x.HeaderRender,()=>Settings.HeaderRender)
            },
            new SettingItem
            {
                Action =SwitchRender(x=>x.FooterRender,()=>Settings.FooterRender)
            },
            new SettingItem
            {
                Action =SwitchRender(x=>x.MenuRender,()=>Settings.MenuRender
                ,()=>Settings.Layout==Layout.Top.Name)
            },
            new SettingItem
            {
                Action =SwitchRender(x=>x.MenuHeaderRender,()=>Settings.MenuHeaderRender
                ,()=>Settings.Layout==Layout.Top.Name)
            },
        };
    }
    protected override void Dispose(bool disposing)
    {
        Settings.Changed -= OnSettingsChanged;
        base.Dispose(disposing);
    }
}