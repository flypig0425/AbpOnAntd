@namespace Zero.Abp.AntdesignUI.Layout

@if (Pure)
{
    @ChildContent
}
else
{
    <div class="@_layoutClass" style="@_weakModeStyle">
        <Layout Style="min-height: 100%;">
            @siderMenuDom
            <div style="@_genLayoutStyle" class="@layoutCls">
                @headerDom
                <WrapContent PrefixCls="@PrefixCls"
                         Class="@_contentClass"
                         Style="@ContentStyle">
                    @(Loading ? @<PageLoading /> : ChildContent)
                </WrapContent>
                @footerDom
            </div>
        </Layout>
    </div>
}
<AntContainer />

@using Microsoft.AspNetCore.Components.Routing
@inherits AntProComponentBase
@code {
    [Parameter] public bool Pure { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public bool DisableMobile { get; set; }
    [Parameter] public bool DisableContentMargin { get; set; }
    [Parameter] public int SiderWidth { get; set; } = 208;
    [Parameter] public string ContentStyle { get; set; }
    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public EventCallback<bool> OnCollapse { get; set; }

    #region StyleOrClass
    bool HasSiderMenu => (Layout == Layout.Mix && SplitMenus) ? siderMenuDom != null : true;
    bool hasLeftPadding => HasSiderMenu && FixSiderbar && Layout != Layout.Top && !IsMobile;
    int paddingLeft => hasLeftPadding ? (Collapsed ? 48 : SiderWidth) : 0;

    private string _weakModeStyle => StyleValues(("filter: invert(80%)", ColorWeak));
    private string _genLayoutStyle => StyleValues("position: relative"
        , ("min-height:0px", isChildrenLayout || (ContentStyle?.Contains("min-height") ?? false))
        , ($"padding-left: {paddingLeft}px", MenuRender)
        );

    private string BaseClassName => $"{PrefixCls}-basicLayout";

    private string layoutCls = "ant-layout";
    private string _layoutClass => ClassNames("ant-design-pro", BaseClassName, $"screen-{ColSize}"
        , ($"{BaseClassName}-top-menu", Layout == Layout.Top)
        , ($"{BaseClassName}-is-children", isChildrenLayout)
        , ($"{BaseClassName}-fix-siderbar", FixSiderbar)
        , ($"{BaseClassName}-mobile", IsMobile)
        );
    private string _contentClass => ClassNames($"{BaseClassName}-content"
        , ($"{BaseClassName}-has-header", HeaderRender)
        , ($"{BaseClassName}-content-disable-margin", DisableContentMargin)
        );
    #endregion

    private readonly bool isChildrenLayout = false;
    protected string ColSize { get; set; } = "lg";//useAntdMediaQuery();
    protected bool IsMobile => (ColSize == "sm" || ColSize == "xs") && !DisableMobile;
    protected bool OpenKeys { get; set; } = true;

    protected ApplicationMenuItemList MatchMenus { get; set; }
    protected string[] MatchMenuKeys { get; set; }

    private ApplicationMenuItemList GetMatchMenus(
        ApplicationMenuItemList menuData,
        bool fullKeys)
    {
        var flatMenus = GetFlatMenu(menuData);
        var menuPathKeys = GetMenuMatches(flatMenus);
        if (menuPathKeys.IsNullOrEmpty())
        {
            return new ApplicationMenuItemList();
        }
        if (!fullKeys)
        {
            menuPathKeys = new string[] { menuPathKeys.LastOrDefault() };
        }
        var matchMenus = menuPathKeys.Select(menuPathKey => flatMenus.Find(f => f.name == menuPathKey).menuItem);
        return new ApplicationMenuItemList(matchMenus);
    }


    private string[] GetMatchMenuKeys(
      ApplicationMenuItemList menuData,
      bool fullKeys)
    {
        var flatMenus = GetFlatMenu(menuData);
        var menuPathKeys = GetMenuMatches(flatMenus);
        if (menuPathKeys.IsNullOrEmpty())
        {
            return new string[] { };
        }
        if (!fullKeys)
        {
            menuPathKeys = new string[] { menuPathKeys.LastOrDefault() };
        }
        return menuPathKeys;
    }


    private string[] GetMenuMatches(List<(string name, ApplicationMenuItem menuItem, string[] pathsName, string url)> flatMenus)
    {
        var tempFlatMenus = flatMenus.Where(w => !w.url.IsNullOrWhiteSpace()).ToList();
        var currentUriAbsolute = NavigationManager.Uri;
        return tempFlatMenus.Find(item =>
         {
             if (!item.url.StartsWith("http"))
             {
                 var _hrefAbsolute = NavigationManager.ToAbsoluteUri(item.url).AbsoluteUri;
                 if (string.Equals(currentUriAbsolute, _hrefAbsolute, StringComparison.OrdinalIgnoreCase))
                 {
                     return true;
                 }
                 if (currentUriAbsolute.Length == _hrefAbsolute.Length - 1)
                 {
                     if (_hrefAbsolute[^1] == '/' && _hrefAbsolute.StartsWith(currentUriAbsolute, StringComparison.OrdinalIgnoreCase))
                     {
                         return true;
                     }
                 }
                 //if (item.menuItem.CustomData["Match"] == NavLinkMatch.Prefix)
                 //{
                 //int prefixLength = _hrefAbsolute.Length;
                 //if (currentUriAbsolute.Length > prefixLength)
                 //{
                 //    return currentUriAbsolute.StartsWith(_hrefAbsolute, StringComparison.OrdinalIgnoreCase)
                 //&& (prefixLength == 0
                 //|| !char.IsLetterOrDigit(_hrefAbsolute[prefixLength - 1])
                 //|| !char.IsLetterOrDigit(_hrefAbsolute[prefixLength])
                 //);
                 //}
                 //}
             }
             return false;
         }).pathsName;
    }

    private List<(string name, ApplicationMenuItem menuItem, string[] pathsName, string url)> GetFlatMenu(
        ApplicationMenuItemList menuData, List<string> pathsName = null)
    {
        pathsName ??= new List<string> { };
        var menus = new List<(string name, ApplicationMenuItem menuItem, string[] pathsName, string url)>();
        menuData.ForEach(item =>
        {
            if (item?.Name == null) { return; }
            var tempPathsName = pathsName.Select(s => s).ToList();
            tempPathsName.AddLast(item.Name);
            var menuItem = new ApplicationMenuItem(item.Name, item.DisplayName, item.Url, item.Icon, item.Order, item.CustomData, item.Target, item.ElementId, item.CssClass);
            menus.Add((item.Name, menuItem, tempPathsName.ToArray(), item?.Url?.TrimStart('~')));
            if (!item.IsLeaf)
            {
                menus.AddRange(GetFlatMenu(item.Items, tempPathsName));
            }
        });
        return menus;
    }




    [Inject] NavigationManager NavigationManager { get; }

    protected ApplicationMenuItemList MenuData { get; set; }

    [Inject] protected IMenuManager MenuManager { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //MatchMenuKeys = new string[] { "TenantManagement3", "TenantManagement.Tenants30" };
        MenuData = (await MenuManager.GetMainMenuAsync()).GetAdministration().Items;
        MatchMenus = GetMatchMenus(MenuData, true);
        MatchMenuKeys = GetMatchMenuKeys(MenuData, true);

    }


    private async Task HandleCollapse(bool collapsed)
    {
        Collapsed = collapsed;
        await OnCollapse.InvokeAsync(collapsed);
    }



    RenderFragment siderMenuDom => renderSiderMenu();
    RenderFragment headerDom => headerRender();
    RenderFragment footerDom => footerRender();

    private RenderFragment headerRender()
    {
        @if ((HeaderRender == false) || Pure) { return null; }
        //@if (HeaderContent != null) { return HeaderContent; }
        return
    @<Template>
        <HeaderView HasSiderMenu="@HasSiderMenu"
                SiderWidth="@SiderWidth"
                Collapsed="@Collapsed"
                MatchMenuKeys="@MatchMenuKeys"
                MenuData="MenuData" />
    </Template>
    ;
    }

    private RenderFragment footerRender()
    {
        @if ((FooterRender == false) || Pure) { return null; }
        //@if (FooterContent != null) { return FooterContent; }
        return
    @<Template>
        <FooterView />
    </Template>
    ;
    }

    private RenderFragment renderSiderMenu()
    {
        @if (MenuRender == false || Pure) { return null; }
        var menuData = new ApplicationMenuItemList(MenuData);
        if (SplitMenus && (OpenKeys != false || Layout == Layout.Mix) && !IsMobile)
        {
            var key = MatchMenuKeys?.FirstOrDefault();
            if (!key.IsNullOrWhiteSpace()) { menuData = menuData?.Find(f => f.Name == key)?.Items; }
            else { menuData = new ApplicationMenuItemList(); }
        }
        var clearMenuData = menuData;  /*clearMenuItem(menuData || []);*/
        if (!(clearMenuData?.Any() ?? false) && SplitMenus) { return null; }
        if (Layout == Layout.Top && !IsMobile) { return siderMenuWrapper(null, true); }
        //if (MenuContent != null) { return MenuContent; }
        // if (MenuContent != null) { var defaultDom = @<SiderMenu MatchMenuKeys="@MatchMenuKeys" MenuDatas="@clearMenuData" />;//{...props}
        //return MenuRender(props, defaultDom);}
        return siderMenuWrapper(clearMenuData);
    }

    private RenderFragment siderMenuWrapper(ApplicationMenuItemList clearMenuData = null, bool hide = false) =>
    @<Template>
        <SiderMenuWrapper Hide="@hide" MenuData="@clearMenuData"
                      MatchMenuKeys="@MatchMenuKeys"
                      SiderWidth="SiderWidth"
                      Collapsed="Collapsed"
                      OnCollapse="HandleCollapse" />
    </Template>
    ;
    }