@namespace Zero.Abp.AntdesignUI.Layout
@inherits AntProComponentBase

@if (Pure)
{
    @ChildContent
}
else
{
    <div class="@LayoutClass" style="@WeakModeStyle">
        <Layout Style="min-height: 100%;">
            @*<CascadingValue Value="@MatchMenuKeys" Name="MatchMenuKeys">*@
            @SiderMenuDom
            <div style="@GenLayoutStyle" class="@layoutCls">
                @HeaderDom
                <WrapContent PrefixCls="@PrefixCls"
                         Class="@ContentClass"
                         Style="@ContentStyle">
                    @(Loading ? @<PageLoading /> : ChildContent)
                    <br />TopSelectedKeys:   @string.Join("--",TopSelectedKeys)
                    <br />SiderSelectedKeys:   @string.Join("--",SiderSelectedKeys)
                    @*   <br />
                        <br />
                        <br />
                        TopSelectedKeys:   @string.Join("--",MatchMenuKeys)*@
                </WrapContent>
                @FooterDom
            </div>
            @*</CascadingValue>*@

        </Layout>
    </div>
}
<AntContainer />

@code {

    RenderFragment SiderMenuDom => renderSiderMenu();
    RenderFragment HeaderDom => headerRender();
    RenderFragment FooterDom => footerRender();

    private RenderFragment footerRender()
    {
        @if ((FooterRender == false) || Pure) { return null; }
        //@if (FooterContent != null) { return FooterContent; }
        return
    @<Template>
        <FooterView />
    </Template>
    ;
    }

    private RenderFragment headerRender()
    {
        @if ((HeaderRender == false) || Pure) { return null; }
        //@if (HeaderContent != null) { return HeaderContent; }

        var menuData = new ApplicationMenuItemList(MenuData);
        if (IsSplitMenus)
        {
            var noChildrenMenuData = MenuData.Select(s => new ApplicationMenuItem(s.Name, s.DisplayName, s.Url, s.Icon, s.Order, s.CustomData, s.Target, s.ElementId, s.CssClass));
            menuData = new ApplicationMenuItemList(noChildrenMenuData);
        }
        return
    @<Template>

        <HeaderView HasSiderMenu="HasSiderMenu"
                SiderWidth="SiderWidth"
                Collapsed="Collapsed"
                MenuData="menuData"
                    @bind-SelectedKeys="TopSelectedKeys" />

    </Template>
    ;
    }


    private RenderFragment renderSiderMenu()
    {
        @if (MenuRender == false || Pure) { return null; }
        var menuData = new ApplicationMenuItemList(MenuData);
        if (IsSplitMenus)
        {
            var key = TopSelectedKeys.FirstOrDefault();
            if (!key.IsNullOrWhiteSpace())
            {
                menuData = menuData?.Find(f => f.Name == key)?.Items;
            }
            else
            {
                menuData = new ApplicationMenuItemList();
            }
        }
        var clearMenuData = menuData;  /*clearMenuItem(menuData || []);*/
        if (!(clearMenuData?.Any() ?? false) && SplitMenus) { return null; }
        if (Layout == Layout.Top && !IsMobile) { return siderMenuWrapper(null, true); }
        //if (MenuContent != null) { return MenuContent; }
        // if (MenuContent != null) { var defaultDom = @<SiderMenu MatchMenuKeys="@MatchMenuKeys" MenuDatas="@clearMenuData" />;//{...props}
        //return MenuRender(props, defaultDom);}
        return siderMenuWrapper(clearMenuData);
    }

    private RenderFragment siderMenuWrapper(ApplicationMenuItemList clearMenuData = null, bool hide = false) =>
    @<Template>
        <SiderMenuWrapper Hide="hide"
                      SiderWidth="SiderWidth"
                      Collapsed="Collapsed"
                      OnCollapse="HandleCollapse"
                      MenuData="clearMenuData"
                          @bind-SelectedKeys="SiderSelectedKeys" />
    </Template>
    ;

 }