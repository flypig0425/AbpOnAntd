@namespace Zero.Abp.AntdesignUI.Layout
@inherits AntLayoutComponentBase

<div class="@className" style="@Style">
    @if (IsMobile)
    {
        <Branding HideTitle />
        @if (CollapsedButtonRender != null)
        {
            <span class="@BaseClassName-collapsed-button"
                  @onclick="@(async () => { await OnCollapse.InvokeAsync(!Collapsed); })">
                @*<Icon Type="@(Collapsed ? "menu-unfold" : "menu-fold")" Theme="outline" />*@
                @CollapsedButtonRender(Collapsed)
            </span>
        }
    }
    else if (Settings.Layout == Layout.Mix.Name)
    {
        <div class="@BaseClassName-logo">
            <Branding />
        </div>
    }
    <div style="flex: 1">@ChildContent</div>
    <HeaderRight />
    @*  @if (RightContentRender != null)
        {
            @RightContentRender
        }*@
</div>

@code{

    [Parameter] public bool Collapsed { get; set; }

    [Parameter] public bool IsMobile { get; set; }

    [Parameter] public EventCallback<bool> OnCollapse { get; set; }

    [Parameter]
    public RenderFragment<bool> CollapsedButtonRender { get; set; } = defaultCollapsedButtonRender;



    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    static readonly RenderFragment<bool> defaultCollapsedButtonRender = collapsed =>
    @<Icon Type="@(collapsed ? "menu-unfold" : "menu-fold")" Theme="outline" />;

private string BaseClassName => $"{PrefixCls}-global-header";
private string className => ClassNames(BaseClassName, Class
, ($"{BaseClassName}-layout-{Settings.Layout}", Settings.Layout != null && Settings.NavTheme == MenuTheme.Dark.Name)//&& headerTheme === 'dark'
);

}