@namespace Zero.Abp.AntdesignUI.Layout
@inherits AntProComponentBase

@if (Layout == Layout.Mix && !IsMobile && SplitMenus)
{   <TopNavHeader Mode="MenuMode.Horizontal"
MatchMenuKeys="MatchMenuKeys"
                  MenuData="NoChildrenMenuData"/>
}
else
{
    <div class="@className" style="@Style">
        @if (IsMobile)
        {
            <Branding HideTitle />
            @if (CollapsedButtonRender != null)
            {
                <span class="@BaseClassName-collapsed-button" @onclick="@(async () => { await OnCollapse.InvokeAsync(!Collapsed); })">
                    @*<Icon Type="@(Collapsed ? "menu-unfold" : "menu-fold")" Theme="outline" />*@
                    @CollapsedButtonRender(Collapsed)
                </span>
            }
        }
        else if (Layout == Layout.Mix)
        {
            <div class="@BaseClassName-logo">
                <Branding />
            </div>
        }
        <div style="flex: 1">@ChildContent</div>
        @if (RightContentRender != null)
        {
            @RightContentRender
        }
    </div>
}
@code{
    private string BaseClassName => $"{PrefixCls}-global-header";
    private string className => ClassNames(BaseClassName, Class
        , ($"{BaseClassName}-layout-{Layout.Name}", Layout != null&&NavTheme==MenuTheme.Dark)//&& headerTheme === 'dark'
        );

          [Parameter]public string[] MatchMenuKeys { get; set; } = { };
    [Parameter] public ApplicationMenuItemList MenuData { get; set; }
    [Parameter] public bool Collapsed { get; set; }

    [Parameter] public bool IsMobile { get; set; }

    [Parameter] public EventCallback<bool> OnCollapse { get; set; }

    [Parameter]
    public RenderFragment<bool> CollapsedButtonRender { get; set; } = defaultCollapsedButtonRender;

    [CascadingParameter(Name = nameof(RightContentRender))]
    public RenderFragment RightContentRender { get; set; }



    private ApplicationMenuItemList NoChildrenMenuData
    {
        get
        {
            var noChildrenMenuData = MenuData.Select(s => new ApplicationMenuItem( s.Name, s.DisplayName,s.Url, s.Icon,  s.Order,  s.CustomData,  s.Target,  s.ElementId , s.CssClass));
            return new ApplicationMenuItemList(noChildrenMenuData);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    static readonly RenderFragment<bool> defaultCollapsedButtonRender = collapsed =>
    @<Icon Type="@(collapsed ? "menu-unfold" : "menu-fold")" Theme="outline" />;
}