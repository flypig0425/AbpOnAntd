@namespace Zero.Abp.AntdesignUI.Layout
@inherits AntLayoutComponentBase

@if (!Hide)
{
    @if (IsMobile)
    {
        <Drawer Visible="@(!Collapsed)"
                Placement="left"
                Class="@($"{PrefixCls}-drawer-sider")"
                Width="@SiderWidth"
                Style="@("padding: 0; height: 100vh; "+Style)"
                BodyStyle="height: 100vh; padding: 0; display: flex; flex-direction: row"
                OnClose="async ()=> { await HandleCollapse(true); }">

            <SiderMenu Collapsed="@false"
                       Class="@ClassNames($"{PrefixCls}-sider",Class)" Mode="Mode"
                       Links="Links"
                       LogoStyle="LogoStyle"
                       Breakpoint="Breakpoint"
                       MenuData="MenuData"
                       SelectedKeys="SelectedKeys"
                       SelectedKeysChanged="SelectedKeysChanged"
                       IsMobile="IsMobile" />
        </Drawer>
    }
    else
    {
        <SiderMenu Style="@Style"
                   Collapsed="@Collapsed"
                   OnCollapse="HandleCollapse"
                   Class="@ClassNames($"{PrefixCls}-sider",Class)"
                   Mode="Mode"
                   Links="Links"
                   LogoStyle="LogoStyle"
                   Breakpoint="Breakpoint"
                   MenuData="MenuData"
                   SelectedKeys="SelectedKeys"
                   SelectedKeysChanged="SelectedKeysChanged"
                   IsMobile="IsMobile" />
        // SiderTheme="SiderTheme"
        //MenuFooterRender = "MenuFooterRender"
        //           CollapsedButtonRender = "CollapsedButtonRender"
    }
}
@code {
    [Parameter] public ApplicationMenuItemList MenuData { get; set; }
    [Parameter] public string[] SelectedKeys { get; set; }
    [Parameter] public EventCallback<string[]> SelectedKeysChanged { get; set; }


    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
    [Parameter] public EventCallback<bool> OnCollapse { get; set; }
    private async Task HandleCollapse(bool collapsed)
    {
        Collapsed = collapsed;
        if (OnCollapse.HasDelegate) { await OnCollapse.InvokeAsync(collapsed); }
        if (CollapsedChanged.HasDelegate) { await CollapsedChanged.InvokeAsync(collapsed); }
    }

    [Parameter] public bool Hide { get; set; }
    [Parameter] public bool IsMobile { get; set; }
    [Parameter] public int SiderWidth { get; set; }


    //[Parameter] public MenuDataItem[] MenuData { get; set; }
    //[CascadingParameter(Name = nameof(MenuExtraRender))]
    //public RenderFragment MenuExtraRender { get; set; }
    [Parameter] public string LogoStyle { get; set; }
    [Parameter] public BreakpointType Breakpoint { get; set; } = BreakpointType.Lg;
    [Parameter] public MenuMode Mode { get; set; } = MenuMode.Inline;
    @*[Parameter] public SiderTheme SiderTheme { get; set; }*@
    [Parameter] public RenderFragment<bool> CollapsedButtonRender { get; set; }
    [Parameter] public RenderFragment<bool> MenuFooterRender { get; set; }
    [Parameter] public List<RenderFragment> Links { get; set; } = new List<RenderFragment>();

    [Parameter] public EventCallback<MouseEventArgs> OnMenuHeaderClick { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (IsMobile) { await HandleCollapse(true); }
    }

    @*   private async Task HandleOnOpenChange(string[] openKeys)
        {
        OpenKeys = openKeys;
        if (OnOpenChange.HasDelegate)
        {
        await OnOpenChange.InvokeAsync(openKeys);
        }
        }*@
}