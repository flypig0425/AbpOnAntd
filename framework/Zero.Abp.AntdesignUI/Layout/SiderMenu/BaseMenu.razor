@namespace Zero.Abp.AntdesignUI.Layout
@using System.Text.RegularExpressions
@using Volo.Abp.UI.Navigation
@*  SelectedKeys="@OpenKeys"
    OpenKeys="@OpenKeys"*@
  @*      SelectedKeysChanged="@SetSelectedKeys"
    OnOpenChange="@SetOpenKeys"*@

@*<br />
    @string.Join("|",OpenKeys)
<br />
    @string.Join("|",SelectedKeys)
<br />
    @string.Join("|",MatchMenuKeys)
*@
<Menu Mode="@Mode"
      Theme="@NavTheme"
      InlineIndent="16"
      Style="@Style"
      Class="@ClassNames(Class,("top-nav-menu",Mode==MenuMode.Horizontal))"
      SelectedKeys="@SelectedKeys"
      OpenKeys="@OpenKeys"
      SelectedKeysChanged="@SetSelectedKeys"
      OnOpenChange="@SetOpenKeys"
      InlineCollapsed="Collapsed">
    @getNavMenuItems((MenuData, this))
</Menu>

@inherits AntProComponentBase
@code {
    static readonly RenderFragment<(ApplicationMenuItemList items, BaseMenu that)> getNavMenuItems = context =>
    @<Template>
        @foreach (var item in context.items ?? new ApplicationMenuItemList())
            {
                @getSubMenuOrItem((item, context.that))
            }
        </Template>
    ;

    static readonly RenderFragment<(ApplicationMenuItem menuItem, BaseMenu that)> defaultTitle = context =>
    @<Template>
        @if (context.menuItem != null)
            {
                var that = @context.that;
                var menuItem = context.menuItem;
                var isHttpUrl = menuItem?.Url?.Contains("http") ?? false;
                var cssClass = string.IsNullOrEmpty(menuItem.CssClass) ? string.Empty : menuItem.CssClass;
                var menuIcon = menuItem?.Icon ?? "";
                <span title="@menuItem.DisplayName" class="@ClassNames($"{that.PrefixCls}-menu-item",($"{that.PrefixCls}-menu-item-link",isHttpUrl),cssClass)">
                    @if (menuIcon.IsNullOrWhiteSpace() || menuItem.IsLeaf)
                    {
                        @menuItem.DisplayName
                    }
                    else
                    {
                        if (menuIcon.StartsWith("fa"))
                        {
                            <span class="anticon anticon-team">
                                <i class="@ClassNames(menuIcon,$"{that.PrefixCls}-sider-icon")"></i>
                            </span>
                        }
                        else if (menuIcon.StartsWith(that.IconPrefixes))
                        {
                            <IconFont Type="@menuIcon" />
                        }
                        else if (menuIcon.StartsWith("http") || Regex.IsMatch(menuIcon, @"\w.(png|jpg|jpeg|svg|webp|gif|bmp)$"))
                        {
                            <img src="@menuIcon" alt="icon" class="@($"{that.PrefixCls}-sider-icon")" />
                        }
                        else
                        {
                            <Icon Type="@menuIcon" Theme="outline" />
                        }
                        <span class="@($"{that.PrefixCls}-menu-item-title")">
                            @menuItem.DisplayName
                        </span>
                    }
                </span>
            }
        </Template>
    ;

    static readonly RenderFragment<(ApplicationMenuItem menuItem, BaseMenu that)> getSubMenuOrItem = context =>
    @<Template>
        @if (context.menuItem != null)
            {
                var that = context.that;
                var menuItem = context.menuItem;
                var cssClass = string.IsNullOrEmpty(menuItem.CssClass) ? string.Empty : menuItem.CssClass;
                var url = menuItem?.Url?.TrimStart('/', '~');

                @if (menuItem?.Items?.Any() ?? false)
                {
                    var title = that.SubMenuItemRender != null ? that.SubMenuItemRender(menuItem) : defaultTitle((menuItem, that));
                    var MenuComponents = that.Menu?.Type == "group" ? typeof(MenuItemGroup) : typeof(SubMenu);
                    var parameters = new Dictionary<string, object>();
                    parameters.Add("Key", menuItem.Name);
                    parameters.Add("TitleTemplate", title);
                    parameters.Add("ChildContent", getNavMenuItems((menuItem?.Items, that)));
                    <Component Type="@MenuComponents" Parameters="@parameters" />
                }
                else
                {
                    <MenuItem Key="@menuItem.Name" Disabled="@menuItem.IsDisabled" Class="@cssClass">
                        @if (that.MenuItemRender != null)
                        {
                            @that.MenuItemRender(menuItem)
                        }
                        else
                        {
                            @if (!url.IsNullOrWhiteSpace())
                            {
                                <MenuLink Href="@url" target="@menuItem.Target">
                                    @defaultTitle((menuItem, that))
                                </MenuLink>
                            }
                            else
                            {
                                @defaultTitle((menuItem, that))
                            }
                        }
                    </MenuItem>
                }
            }
        </Template>
    ;

    //[Parameter] public MenuDataItem[] MenuData { get; set; } = { };
    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public bool IsMobile { get; set; }
    [Parameter] public MenuMode Mode { get; set; }//  //ToDo: 'vertical' | 'vertical-left' | 'vertical-right' | 'horizontal' | 'inline';
    [Parameter]
    public string[] OpenKeys
    {
        get => (!Collapsed && new Layout[] { Layout.Side, Layout.Mix }.Contains(Layout)) ? openKeys : null;
        set => openKeys = value;
    }

    [Parameter]
    public string[] SelectedKeys
    {
        get => selectedKeys;
        set => selectedKeys = value;
    }

    [Parameter] public EventCallback<string[]> OnOpenChange { get; set; }
    [Parameter] public EventCallback<string[]> OnSelected { get; set; }

    [Parameter] public string IconPrefixes { get; set; } = "icon-";
    [Parameter] public bool DefaultCollapsed { get; set; }

    [Parameter] public RenderFragment<ApplicationMenuItem> MenuItemRender { get; set; }
    [Parameter] public RenderFragment<ApplicationMenuItem> SubMenuItemRender { get; set; }

    [Parameter] public ApplicationMenuItemList MenuData { get; set; }

    //string[] selectedKeys;

    string[] openKeys = Array.Empty<string>();
    string[] selectedKeys = Array.Empty<string>();
    async void SetOpenKeys(string[] keys)
    {
        OpenKeys = keys;
        if (!IsMobile && OnOpenChange.HasDelegate)
        {
            await OnOpenChange.InvokeAsync(keys);
        }
    }
    async void SetSelectedKeys(string[] keys)
    {
        SelectedKeys = keys;
        if (OnSelected.HasDelegate)
        {
            await OnSelected.InvokeAsync(keys);
        }
    }

    [Parameter] public string[] MatchMenuKeys { get; set; } = { };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (MatchMenuKeys?.Any() ?? false)
        {
            SetOpenKeys(MatchMenuKeys);
            SetSelectedKeys(MatchMenuKeys);
        }
    }
}