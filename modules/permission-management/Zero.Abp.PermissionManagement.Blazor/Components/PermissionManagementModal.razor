@using Microsoft.Extensions.Localization
@using Volo.Abp.PermissionManagement
@using Volo.Abp.PermissionManagement.Localization
@using Zero.Abp.AspNetCore.Components
@inherits AbpComponentBase

<Modal Visible="@_modalVisible"
       Title="@($"{L["Permissions"]} - {_entityDisplayName}")"
       OkText="@L["Save"].Value"
       CancelText="@L["Cancel"].Value"
       OnOk="SaveAsync"
       OnCancel="CloseModal"
       ConfirmLoading="ConfirmLoading"
       BodyStyle="max-height :500px;overflow:auto;"
       Centered MaskClosable="@false">

    <Checkbox Indeterminate="GrantPart"
              Checked="@GrantAll"
              OnChange="@((b) => GrantAllChanged(b))">@L["SelectAllInAllTabs"]</Checkbox>
    <Divider />

    @if (_groups != null)
    {
        <Tabs TabPosition="TabPosition.Left" @bind-ActiveKey="@_selectedTabName">
            @foreach (var group in _groups)
            {
                <TabPane Key="@GetNormalizedGroupName(group.Name)"
                 TabTemplate="@(TabTemplate(group))">
                    <h4>@group.DisplayName</h4>
                    <Divider />
                    <Checkbox Indeterminate="@(IsGrantPart(group))"
                      Checked="@(IsGrantAll(group))"
                      OnChange="@(b => GroupGrantAllChanged(b, group))">
                        @L["SelectAllInThisTab"]
                    </Checkbox>
                    <Divider />

                    @foreach (var permission in group.Permissions)
                    {
                        <div style="@(permission.ParentName != null ?"margin: 1rem !important;":"")">
                            <Checkbox Checked="@permission.IsGranted"
                          OnChange="@(b => PermissionChanged(b, group, permission))"
                          Disabled="@(IsDisabledPermission(permission))">
                                @GetShownName(permission)
                            </Checkbox>
                        </div>
                    }
                    @*</ChildContent>*@
                </TabPane>
            }
        </Tabs>
    }
</Modal>
@code {
    RenderFragment<PermissionGroupDto> TabTemplate => (group) =>@<Template>
        @if (group.Permissions.Any(x => x.IsGranted))
            {
                <b>@group.DisplayName ( @(GrantCount(group)) )</b>
            }
            else
            {
                <b>@group.DisplayName</b>
            }
        </Template>;
}